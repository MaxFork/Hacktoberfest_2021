//PROBLEM-

Given an array of names (consisting of lowercase characters) of candidates in an election. A candidate name in array represents a vote casted to the candidate. Print the name of candidate that received Max votes. If there is tie, print lexicographically smaller name.

Example 1:

Input:
n = 13
Votes[] = {john,johnny,jackie,johnny,john 
jackie,jamie,jamie,john,johnny,jamie,
johnny,john}
Output: john 4
Explanation: john has 4 votes casted for 
him, but so does johny. john is 
lexicographically smaller, so we print 
john and the votes he received.
Example 2:

Input:
n = 3
Votes[] = {andy,blake,clark}
Output: andy 1
Explanation: All the candidates get 1 
votes each. We print andy as it is 
lexicographically smaller.

//SOURCE CODE-

#include <iostream>
#include <map>
#include <algorithm>
#include <cstdlib>
#include<bits/stdc++.h>

using namespace std;

pair <string,int> winner(string arr[],int n);

int main()
{
    int t;
    cin>>t;
    
    for(int i=0;i<t;i++)
    {
        
        
        int n;
        cin>>n;
        
        string arr[n];
        
        for (int i=0;i<n;i++)
        cin>>arr[i];
        
        pair <string,int> result = winner(arr,n);
        
        cout<<result.first << " " << result.second << endl;
    }
    return 0;
}

pair <string,int> winner(string arr[],int n)
{
    // Your code here
    // Return the string containing the name and an integer
    // representing the number of votes the winning candidate got
    sort (arr , arr + n);
    unordered_map <string , int> hash;
    for (int i=0;i<n;i++) {
        hash[arr[i]] += 1; 
    }
    int Max = INT_MIN;
    for (int i=0;i<n;i++)
    {
        Max = max (Max , hash[arr[i]]);
    }
    pair <string , int> p1;
    for (int i=0;i<n;i++) 
    {
        if (hash[arr[i]] == Max) 
        {
             p1.first = arr[i];
             p1.second = Max;
             return p1;
        }
    }
}
