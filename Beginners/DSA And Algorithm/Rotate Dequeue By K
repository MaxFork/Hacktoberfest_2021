//PROBLEM STATEMENT-

Given a Deque deq of size N containing non-negative integers and a positive integer K, the task is to rotate elements of the deque by K places in a circular fashion. There will be two rotations which you have to implement depending on the type rotating query. Below is the description of rotating type and value of K for which you have to rotate in circular way:
Type-1. right_Rotate_Deq_ByK(): this function should rotate deque by K places in a clockwise fashion.
Type-2. left_Rotate_Deq_ByK(): this function should rotate deque by K places in an anti-clockwise fashion.

Example 1:

Input:
6
1 2 3 4 5 6
1 2

Output: 
5 6 1 2 3 4 

Explanation: 
The dequeue is 1 2 3 4 5 6. 
The query type is 1 and k is 2. So, we 
need to right rotate dequeue by 2 times. 
In 1 right rotation we get 6 1 2 3 4 5. 
In another we get 5 6 1 2 3 4.
Example 2:

Input: 
6
1 2 3 4 5 6 
2 2 

Output: 
3 4 5 6 1 2 

Explanation: 
The dequeue is 1 2 3 4 5 6. 
The query type is 2 and k is 2. So, we 
need to left rotate dequeue by 2 times. 
In 1 left rotation we get 2 3 4 5 6 1. 
In another we get 3 4 5 6 1 2.

//SOURCE CODE-

#include<bits/stdc++.h>
using namespace std;

void left_Rotate_Deq_ByK(deque<int> &deq, int n, int k)
{
    // your code here
    for(int i=0;i<k;i++)
    {
        deq.push_back(deq.front());
        deq.pop_front();
    }
}

void right_Rotate_Deq_ByK(deque<int> &deq, int n, int k)
{
    // your code here
    for(int i=0;i<k;i++)
    {
        deq.push_front(deq.back());
        deq.pop_back();
    }
}

int main()
{
    int t;
    cin>>t;
    
    while(t--)
    {
        int n;
        cin>>n;
        
        deque<int> deq;
        for(int i = 1; i <= n; i++)
        {
            int val;
            cin>>val;
            deq.push_back(val);
            
        }
        int rotateQuery, k;
        cin>>rotateQuery>>k;
        
        
        
        if(rotateQuery == 1)
            right_Rotate_Deq_ByK(deq, n, k);
            
        else left_Rotate_Deq_ByK(deq, n, k);
        
        
        for(auto itr = deq.begin(); itr != deq.end(); itr++)
            cout << *itr << " ";
        cout << endl;
    }
    return 0;
}
